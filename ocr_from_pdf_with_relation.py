# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xkOYVmJe0h2pD_AL91XWT77gLPBzl7wg
"""

# !pip install pytesseract
# !pip install PyMuPDF

import re
import spacy
import fitz
from PIL.Image import frombytes
from pytesseract import image_to_string

def extract_text(pdf_path):
    try:
        text_values = []
        doc = fitz.open(pdf_path)
        for page_num in range(doc.page_count):
            page = doc[page_num]
            image = page.get_pixmap(matrix=fitz.Matrix(3,3))
            pil_image = frombytes("RGB", [image.width, image.height], image.samples)
            page_text = image_to_string(pil_image)
          #   print(page_text)
            text_values.append(page_text)

        doc.close()
        text = ''.join(text_values)
#         print(text_values)
#         text = "".join(text.split('\n'))
#         text = "".join(textss.split(','))
#         text
        # print("111111111111111111111111111",text)
        return text
    except Exception as e:
        return "error: " + str(e)

def extract_data(text):
    print("text", text)
    invoice_number_regex = re.compile(r'PO\s*#\s*(\d+)')
    date_regex = re.compile(r'\b\d{4}-\d{2}-\d{2}\b')
    vendor_regex = re.compile(r'SHIP\s*TO\s*VENDOR\n\n([\s\S]+?)\n\n', re.DOTALL)
    customer_regex = re.compile(r'Customer\s*Name\n\n([\s\S]+?)\n\n', re.DOTALL)
    product_regex = re.compile(r'Items\n\n([\s\S]+?)\n\n', re.DOTALL)
    quantity_regex = re.compile(r'(\d+)\s*Qty')
    price_regex = re.compile(r'Price\n\n(.+?)$', re.DOTALL)
    # total_regex = re.compile(r'TOTAL:\n\n(.+?)$', re.DOTALL)
    # total_regex = re.compile(r'TOTAL:\s*([\d$.,]+)', re.DOTALL)
    total_regex = re.compile(r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\$', re.DOTALL)

    temp = text.split('\n\n')
    # print("temp: ", temp)
    invoice_number_match = invoice_number_regex.search(text)
    invoice_number = invoice_number_match.group(0) if invoice_number_match else None

    date_match = date_regex.search(text)
    date = date_match.group() if date_match else None
    vendor_match = vendor_regex.search(text)
    vendor = vendor_match.group(0).strip() if vendor_match else None
    vendor = "".join(temp[5:8])
    customer_match = customer_regex.search(text)
    customer = customer_match.group(0).strip() if customer_match else None
    customer = "".join(temp[9:12])
    product_match = product_regex.search(text)
    product_text = product_match.group(0) if product_match else ''

    # Extract individual items
    items = []
    for i in re.finditer(r'(.*?)\n\n', product_text, re.DOTALL):
        item = i.group(0).strip()
        items.append(item)
    # print("items-----", items)

    # fetch all rows
    quantity_match = quantity_regex.findall(text)
    prices = "".join(price_regex.findall(text))
    prices = "".join(prices.split("\n"))
    prices = (prices.replace(" ","")).split("$")[0:9]

    # total_match = total_regex.search(text)
    # total = total_match.group(0).strip() if total_match else None


    # total = (total.group(0).strip().replace(',', '').split('$')) if total.group(0) else None

    # total_match = total_regex.search(text)
    # total_label = total_match.group(1).strip() if total_match and total_match.group(0) else None
    # total_ = (total_match.group(0).strip().replace(',', '').split('$')) if total_match and total_match.group(0) else None

    total_ = total_regex.findall(text)
    total_amount = total_[-1]
    print(total_)


# Print the result
    # print("Total Label:", total_label)
    # print("Total aaaaa:", total_matches)


    # total = "".join(total.split("\n"))
    # # print(total)
    # # total = total.replace("$", ";")
    # # total = total.replace(" ","")
    # # print("total  -", total)
    # ok=total.split("$")
    # # print("totalok  -", total.split("$"))
    # arr=[]
    # for i in ok:
    #   st=""

    #   for j in i:
    #
    #       pass
    #   arr.append(st)
    # print("arr",arr)


    # Organize data into a structured format
    extracted_data = {
        'invoice_number': invoice_number,
        'date': date,
        'vendor': vendor,
        'customer': customer,
        'items': items,
        'quantities': quantity_match,
        'prices': prices,
        'total_': total_,
        'total_amount_include_GST': total_amount
    }
#     print(extracted_data)

    return extracted_data

def extract_relationships(text):

    nlp = spacy.load('en_core_web_sm')
    doc = nlp(text)

    # Identify relationships between entities
    relationships = []
    for i in doc.sents:
        for chunk in i.noun_chunks:
            if chunk.root.head == i.root:
                relationships.append((chunk.root.text, i.root.text))
    # print("relationships--=---", relationships)
    return relationships

def main():
    pdf_path = './PO2.pdf'
    text = extract_text(pdf_path)
    extracted_data = extract_data(text)
    relationships = extract_relationships(text)

    print('Extracted Data:')
    print(extracted_data)

    print('Relationships:')
    print(relationships)


if __name__ == '__main__':
    main()

